<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  
  <subtitle>海涛的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lihaitao.net.cn/"/>
  <updated>2019-02-03T07:45:46.547Z</updated>
  <id>https://lihaitao.net.cn/</id>
  
  <author>
    <name>海涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手机+pc代理软件使用教程</title>
    <link href="https://lihaitao.net.cn/2019/ssr/d0edc1ed.html"/>
    <id>https://lihaitao.net.cn/2019/ssr/d0edc1ed.html</id>
    <published>2019-02-02T10:29:14.000Z</published>
    <updated>2019-02-03T07:45:46.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/fireworks.jpg" alt=""><br>手机和PC端代理软件使用教程，内含软件下载链接<a id="more"></a></p><p><strong>先祝大家新春快乐！！嘻嘻🙃🙃</strong></p><p>不废话了，开始吧。</p><h1 id="手机端使用方法"><a href="#手机端使用方法" class="headerlink" title="手机端使用方法"></a>手机端使用方法</h1><h2 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h2><p>网上有很多的Android端的代理客户端，但是为了防止后台上传服务器地址和端口偷用流量，我们还是使用GitHub上开源的手机端app—<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">shadowsocks-android</a>，然后将下载好的apk文件安装到手机。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>打开手机端app，然后点击右上角奥的”+”，选择手动配置，然后填写配置选项，如下图：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/ssr1.jpg" alt=""></p><blockquote><p>其中服务器填写服务器IP地址就可以，远程端口根据服务器端的设置填写，密码和加密方式也一样，带规则根据自己的需要进行选择，全局代理就是所有的流量都会走代理，所有如果访问过国内的网站会很慢。我们一般选择PAC模式，也就是绕过局域网和中国大陆。这样如果访问防火墙以外的网站的就会自动走代理，但是有时候可能PAC规则更新不够及时，会导致一些墙外的网站无法在PAC模式下访问，这是就需要更改到全局模式。</p></blockquote><h1 id="Windows系统的使用方法"><a href="#Windows系统的使用方法" class="headerlink" title="Windows系统的使用方法"></a>Windows系统的使用方法</h1><p>其实PC端使用的方法和上面的手机端大同小异，这里还是简单介绍一下配置方法。</p><h2 id="下载客户端-1"><a href="#下载客户端-1" class="headerlink" title="下载客户端"></a>下载客户端</h2><p>同样的网上的开源程序也有很多，所以我们同样选择GitHub上的开源软件，我使用的软件我忘了GitHub地址，所以只好放在网盘里供大家使用了。<br><a href="https://pan.baidu.com/s/1hpMNH3rye4tV1lQmZPLW0w" target="_blank" rel="noopener">点击下载</a>，提取码：<code>9y0b</code></p><h2 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h2><p>下载好之后进行配置，如下图：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/ssr2.jpg" alt=""></p><p>配置同上。</p><p>然后右键右下方的小飞机，设置如下图:</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/ssr3.jpg" alt=""></p><p>其中系统代理模式可以选择不同的代理模式，根据自己需要进行选择。</p><h1 id="Linux系统的使用方法"><a href="#Linux系统的使用方法" class="headerlink" title="Linux系统的使用方法"></a>Linux系统的使用方法</h1><p><code>待更新</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/fireworks.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;手机和PC端代理软件使用教程，内含软件下载链接
    
    </summary>
    
      <category term="ssr" scheme="https://lihaitao.net.cn/categories/ssr/"/>
    
    
      <category term="vpn" scheme="https://lihaitao.net.cn/tags/vpn/"/>
    
      <category term="教程" scheme="https://lihaitao.net.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry初始化配置</title>
    <link href="https://lihaitao.net.cn/2019/raspberry-init/225c7983.html"/>
    <id>https://lihaitao.net.cn/2019/raspberry-init/225c7983.html</id>
    <published>2019-01-29T14:23:50.000Z</published>
    <updated>2019-01-31T07:25:58.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry.jpg" alt=""></p><p>对于刚拿到手的树莓派应该如何配置呢？这里记录了一些基本的配置方法。</p><a id="more"></a><h2 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a>烧录系统</h2><p>下图是我买的树莓派套餐：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry1.jpg" alt=""></p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>首先去<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">官网</a>下载镜像</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry2.jpg" alt=""></p><p>然后使用Win32DiskImager将下载好的镜像烧录到16G的TF卡中，软件可以<a href="https://pan.baidu.com/s/1rA9nXuvo4sggb6j26JlESQ" target="_blank" rel="noopener">点击这里</a>下载。</p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>如果没有显示器，则可以使用如下方法来配置ssh进行远程登陆。</p><p>镜像烧录好之后打开文件夹，然后在文件夹中创建一个名为<code>ssh</code>的文件。</p><div class="note warning"><p>注意：文件名是ssh，不是ssh.txt</p></div><p>配置好之后就可以进行远程登陆了。</p><h2 id="连接WiFi"><a href="#连接WiFi" class="headerlink" title="连接WiFi"></a>连接WiFi</h2><p>同样的，如果没有显示器，需要向上一步一样创建一个名为<code>wpa_supplicant.conf</code>的文件。文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=GB</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">  ssid=&quot;WiFi名&quot;</span><br><span class="line">  psk=&quot;WiFi密码&quot;</span><br><span class="line">  priority=数字，越大代表优先级越高</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>其中network可以配置多个，并分配不同的优先级</p></div><p><strong>通过以上这些步骤，我们已经可以使用ssh远程连接我们的树莓派了</strong></p><p>其他教程是使用如下命令来连接树莓派的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@raspberrypi.local</span><br></pre></td></tr></table></figure><p>但是我没有连接成功，我使用的命令是<code>ssh pi@IP地址</code>，那么问题来了，我们怎么知道树莓派的IP地址呢？这里介绍两种方法来查看树莓派的IP。</p><p>方法一：查看路由器，在win命令行中输入<code>ipconfig</code></p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry3.jpg" alt=""></p><p>找到默认网关，然后在浏览器中输入默认网关地址查看树莓派的IP地址</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry4.jpg" alt=""></p><p>方法二：使用扫描工具扫描IP段，我使用的工具是<code>Advanced IP Scanner</code>，扫描结果如下图所示：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry5.jpg" alt=""></p><p>然后使用ssh连接即可</p><h2 id="自动连接WiFi"><a href="#自动连接WiFi" class="headerlink" title="自动连接WiFi"></a>自动连接WiFi</h2><p>有一种尴尬的情况就是突然网断了，接着也就和树莓派失去了联系。我们应该如何防止这种突发状况呢？<br>我们可以使用一个脚本进行定时检测，然后自动重连WiFi。<br>下面为配置方法：</p><p>1、Python 代码 autowifi.py，放在 /home/pi 目录下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="string">' not in os.popen('</span>sudo wpa_cli status<span class="string">').read():</span></span><br><span class="line"><span class="string">        print '</span>\n****** wifi <span class="keyword">is</span> down, restart... ******\n<span class="string">'</span></span><br><span class="line"><span class="string">        os.system('</span>sudo ifup wlan0<span class="string">')</span></span><br><span class="line"><span class="string">    time.sleep() # minutes</span></span><br></pre></td></tr></table></figure><p>2、Shell脚本autowifi.sh，也放在 /home/pi 目录下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">python /home/pi/autowifi.py &amp;</span><br></pre></td></tr></table></figure><p>3、开机自动启动以上脚本：在终端窗口执行以下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -f /home/pi/autowifi.sh /etc/init.d/</span><br><span class="line">sudo chmod +x /etc/init.d/autowifi.sh</span><br><span class="line">sudo chown root:root /etc/init.d/autowifi.sh</span><br><span class="line">sudo update-rc.d autowifi.sh defaults</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/raspberry.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于刚拿到手的树莓派应该如何配置呢？这里记录了一些基本的配置方法。&lt;/p&gt;
    
    </summary>
    
      <category term="玩" scheme="https://lihaitao.net.cn/categories/%E7%8E%A9/"/>
    
    
      <category term="raspberry" scheme="https://lihaitao.net.cn/tags/raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理</title>
    <link href="https://lihaitao.net.cn/2018/nginx-proxy/dfa9b87c.html"/>
    <id>https://lihaitao.net.cn/2018/nginx-proxy/dfa9b87c.html</id>
    <published>2018-12-23T09:31:27.000Z</published>
    <updated>2019-01-30T04:07:47.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/urban2.jpg" alt=""><br>终于配置好了反向代理，简单记录一下。<br><a id="more"></a><br>一、 <strong>概述</strong></p><ol><li>什么是反向代理</li></ol><p><code>反向代理</code>（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式称为反向代理服务。</p><p>二、 反向代理服务器的工作原理</p><ol><li>防止web服务器被攻击</li></ol><p>如果您的内容服务器具有必须保持安全的敏感信息，如信用卡号数据库，可在防火墙外部设置一个代理服务器作为内容服务器的替身。当外部客户机尝试访问内容服务器时，会将其送到代理服务器。实际内容位于内容服务器上，在防火墙内部受到安全保护。代理服务器位于防火墙外部，在客户机看来就像是内容服务器。 当客户机向站点提出请求时，请求将转到代理服务器。然后，代理服务器通过防火墙中的特定通路，将客户机的请求发送到内容服务器。内容服务器再通过该通道将结果回传给代理服务器。代理服务器将检索到的信息发送给客户机，好像代理服务器就是实际的内容服务器。如果内容服务器返回错误消息，代理服务器会先行截取该消息并更改标头中列出的任何 URL，然后再将消息发送给客户机。如此可防止外部客户机获取内部内容服务器的重定向 URL。<br>这样，代理服务器就在安全数据库和可能的恶意攻击之间提供了又一道屏障。与有权访问整个数据库的情况相对比，就算是侥幸攻击成功，作恶者充其量也仅限于访问单个事务中所涉及的信息。未经授权的用户无法访问到真正的内容服务器，因为防火墙通路只允许代理服务器有权进行访问。</p><p> <img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/proxy.png" alt="原理图"></p><p>三、博客反向代理免备案方案 + SLL证书</p><ol><li>假设我有两个服务器A和B，服务器A在国外，B在国内，我用A作为代理服务器来转发请求给B。因为B未备案，所以无法直接访问<code>80端口</code>。所以我们在<code>nginx</code>的配置文件中将其端口改为<code>2324</code></li></ol><p>配置如下：</p>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">2324</span> ;</span><br><span class="line">    <span class="attribute">root</span> /var/www/blog/;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着配置服务器A，大体的思路就是在服务器A上配置<code>SSL</code>证书，默认将<code>80端口</code>的访问rewrite到<code>443端口</code>，然后在443端口下进行相关配置。</p><p>配置如下：</p>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  blog.lihtao.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> <span class="literal">permanent</span>; <span class="comment">#</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># HTTPS server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="comment">#root /var/www/blog;</span></span><br><span class="line">    <span class="comment">#index index.html index.htm;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>   cert/ssl.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  cert/ssl.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 反向代理</span></span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">180</span>;</span><br><span class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">180</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">180</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarder-For <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://B服务器IP:2324;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果还要进行图片防盗链、公益404等功能的配置，都可以直接在B服务器<code>2324端口</code>下配置。</p><p><strong>如果有什么疑问可以留言</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/urban2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;终于配置好了反向代理，简单记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="nginx" scheme="https://lihaitao.net.cn/tags/nginx/"/>
    
      <category term="反向代理" scheme="https://lihaitao.net.cn/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://lihaitao.net.cn/2018/linux-0/d0edc1ed.html"/>
    <id>https://lihaitao.net.cn/2018/linux-0/d0edc1ed.html</id>
    <published>2018-12-22T07:06:42.000Z</published>
    <updated>2019-02-03T05:47:10.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/nature.jpg" alt=""></p><p>发现很多使用过的Linux命令总是忘记，所以打算把常用的命名整理到这里 <code>待更新</code><br><a id="more"></a></p><h1 id="防火墙管理工具—iptables"><a href="#防火墙管理工具—iptables" class="headerlink" title="防火墙管理工具—iptables"></a>防火墙管理工具—iptables</h1><h2 id="iptables-中基本的命令参数"><a href="#iptables-中基本的命令参数" class="headerlink" title="iptables 中基本的命令参数"></a>iptables 中基本的命令参数</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-P</td><td style="text-align:left">设置默认策略</td></tr><tr><td style="text-align:left">-F</td><td style="text-align:left">清空规则链</td></tr><tr><td style="text-align:left">-L</td><td style="text-align:left">查看规则链</td></tr><tr><td style="text-align:left">-A</td><td style="text-align:left">在规则链的末尾加入新规则</td></tr><tr><td style="text-align:left">-I num</td><td style="text-align:left">在规则链的头部加入新规则</td></tr><tr><td style="text-align:left">-D</td><td style="text-align:left">删除某一条规则</td></tr><tr><td style="text-align:left">-s</td><td style="text-align:left">匹配来源地址 IP/MASK，加叹号“!”表示除这个 IP 外</td></tr><tr><td style="text-align:left">-d</td><td style="text-align:left">匹配目标地址</td></tr><tr><td style="text-align:left">-i</td><td style="text-align:left">匹配从这块网卡流入的数据</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:left">匹配从这块网卡流出的数据</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">匹配协议，如 TCP、 UDP、 ICMP</td></tr><tr><td style="text-align:left">–dport num</td><td style="text-align:left">匹配目标端口号</td></tr><tr><td style="text-align:left">-sport num</td><td style="text-align:left">匹配来源端口号</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>在 iptables 命令后添加-L 参数查看已有的防火墙规则链：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure></p><p>在 iptables 命令后添加-F 参数清空已有的防火墙规则链：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure></p><p>把 INPUT 规则链的默认策略设置为拒绝：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br></pre></td></tr></table></figure></p><p>向 INPUT 链中添加允许 ICMP 流量进入的策略规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p icmp -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>删除 INPUT 规则链中刚刚加入的那条策略（允许 ICMP 流量），并把默认策略设置为允许：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT 1</span><br><span class="line">iptables -P INPUT ACCEPT</span><br></pre></td></tr></table></figure></p><p>将 INPUT 规则链设置为只允许指定网段的主机访问本机的 22 端口，拒绝来自其他所有主机的流量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j REJECT</span><br></pre></td></tr></table></figure></p><div class="note warning"><p>注意：防火墙策略规则是按照从上到下的顺序匹配的，因此一定要把允许动作放到拒绝动作前面，否则所有的流量就将被拒绝掉，从而导致任何主机都无法访问我们的服务。</p></div><p>向 INPUT 规则链中添加拒绝所有人访问本机 12345 端口的策略规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 12345 -j REJECT</span><br><span class="line">iptables -I INPUT -p udp --dport 12345 -j REJECT</span><br></pre></td></tr></table></figure></p><p>向 INPUT 规则链中添加拒绝 192.168.10.5 主机访问本机 80 端口（Web 服务）的策略规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -s 192.168.10.5 --dport 80 -j REJECT</span><br></pre></td></tr></table></figure></p><p>向 INPUT 规则链中添加拒绝所有主机访问本机 1000～1024 端口的策略规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 1000:1024 -j REJECT</span><br><span class="line">iptables -A INPUT -p udp --dport 1000:1024 -j REJECT</span><br></pre></td></tr></table></figure></p><div class="note warning"><p>请特别注意，使用 iptables 命令配置的防火墙规则默认会在系统下一次重启时失效</p></div><br>如果想让配置的防火墙策略永久生效，还要执行保存命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><br><br><div class="note info"><p>ACCEPT（允许流量通过）、REJECT（拒绝流量通过）、LOG（记录日志信息）、DROP（拒绝流量通过），DROP是直接将流量丢弃而且不响应；REJECT则会在拒绝流量后再回复一条“您的信息已经收到，但是被扔掉了”信息，从而让流量发送方清晰地看到数据被拒绝的响应信息</p></div><h1 id="防火墙管理工具—firewalld"><a href="#防火墙管理工具—firewalld" class="headerlink" title="防火墙管理工具—firewalld"></a>防火墙管理工具—firewalld</h1><h2 id="firewalld-中常用的区域名称及其规则"><a href="#firewalld-中常用的区域名称及其规则" class="headerlink" title="firewalld 中常用的区域名称及其规则"></a>firewalld 中常用的区域名称及其规则</h2><blockquote><p>相较于传统的防火墙管理配置工具， firewalld 支持动态更新技术并加入了区域（zone）<br>的概念。简单来说，区域就是 firewalld 预先准备了几套防火墙策略集合（策略模板），用户可<br>以根据生产场景的不同而选择合适的策略集合，从而实现防火墙策略之间的快速切换。</p></blockquote><table><thead><tr><th style="text-align:left">区域</th><th style="text-align:left">默认策略规则</th></tr></thead><tbody><tr><td style="text-align:left">trusted</td><td style="text-align:left">允许所有的数据包</td></tr><tr><td style="text-align:left">home</td><td style="text-align:left">拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关,则允许流量</td></tr><tr><td style="text-align:left">internal</td><td style="text-align:left">等同于home区域</td></tr><tr><td style="text-align:left">work</td><td style="text-align:left">区域拒绝流入的流量,除非与流出的流量数相关；而如果流量与ssh、ipp-client与</td></tr></tbody></table><p>dhcpv6-client服务相关，则允许流量<br>public | 拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许流量<br>external | 拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量<br>dmz | 拒绝流入的流量，除非与流出的流量相关；而如果流量与 ssh 服务相关，则允许流量<br>block | 拒绝流入的流量，除非与流出的流量相关<br>drop | 拒绝流入的流量，除非与流出的流量相关</p><h2 id="终端管理工具"><a href="#终端管理工具" class="headerlink" title="终端管理工具"></a>终端管理工具</h2><p><strong>firewalld-cmd 命令中使用的参数以及作用</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">–get-default-zone</td><td style="text-align:left">查询默认的区域名称</td></tr><tr><td style="text-align:left">–set-default-zone=&lt;区域名称&gt;</td><td style="text-align:left">设置默认的区域，使其永久生效</td></tr><tr><td style="text-align:left">–get-zones</td><td style="text-align:left">显示可用的区域</td></tr><tr><td style="text-align:left">–get-services</td><td style="text-align:left">显示预先定义的服务</td></tr><tr><td style="text-align:left">–get-active-zones</td><td style="text-align:left">显示当前正在使用的区域与网卡名称</td></tr><tr><td style="text-align:left">–add-source=</td><td style="text-align:left">将源自此 IP 或子网的流量导向指定的区域</td></tr><tr><td style="text-align:left">–remove-source=</td><td style="text-align:left">不再将源自此 IP 或子网的流量导向某个指定区域</td></tr><tr><td style="text-align:left">–add-interface=&lt;网卡名称&gt;</td><td style="text-align:left">将源自该网卡的所有流量都导向某个指定区域</td></tr><tr><td style="text-align:left">–change-interface=&lt;网卡名称&gt;</td><td style="text-align:left">将某个网卡与区域进行关联</td></tr><tr><td style="text-align:left">–list-all</td><td style="text-align:left">显示当前区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td style="text-align:left">–list-all-zones</td><td style="text-align:left">显示所有区域的网卡配置参数、资源、端口以及服务等信息</td></tr><tr><td style="text-align:left">–add-service=&lt;服务名&gt;</td><td style="text-align:left">设置默认区域允许该服务的流量</td></tr><tr><td style="text-align:left">–add-port=&lt;端口号/协议&gt;</td><td style="text-align:left">设置默认区域允许该端口的流量</td></tr><tr><td style="text-align:left">–remove-service=&lt;服务名&gt;</td><td style="text-align:left">设置默认区域不再允许该服务的流量</td></tr><tr><td style="text-align:left">–remove-port=&lt;端口号/协议&gt;</td><td style="text-align:left">设置默认区域不再允许该端口的流量</td></tr><tr><td style="text-align:left">–reload</td><td style="text-align:left">让“永久生效”的配置规则立即生效，并覆盖当前的配置规则</td></tr><tr><td style="text-align:left">–panic-on</td><td style="text-align:left">开启应急状况模式</td></tr><tr><td style="text-align:left">–panic-off</td><td style="text-align:left">关闭应急状况模式</td></tr></tbody></table><div class="note info"><p>与 Linux 系统中其他的防火墙策略配置工具一样，使用 firewalld 配置的防火墙策略默认为运行时（Runtime）模式，又称为当前生效模式，而且随着系统的重启会失效。如果想让配置策略一直存在，就需要使用永久（Permanent）模式了，方法就是在用firewall-cmd 命令正常设置防火墙策略时添加–permanent参数，这样配置的防火墙策略就可以永久生效了。但是，永久生效模式有一个“不近人情”的特点，就是使用它设置的策略只有在系统重启之后才能自动生效。如果想让配置的策略立即生效，需要手动执行 firewall-cmd –reload 命令。</p></div><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看 firewalld 服务当前所使用的区域：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure></p><p>查询 eno16777728 网卡在 firewalld 服务中的区域：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-zone-of-interface=eno16777728</span><br></pre></td></tr></table></figure></p><p>把 firewalld 服务中 eno16777728 网卡的默认区域修改为 external，并在系统重启后生效。分别查看当前与永久模式下的区域名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=external --change-interface=eno16777728</span><br><span class="line">firewall-cmd --get-zone-of-interface=eno16777728</span><br><span class="line">firewall-cmd --permanent --get-zone-of-interface=eno16777728</span><br></pre></td></tr></table></figure></p><p>把 firewalld 服务的当前默认区域设置为 public：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --set-default-zone=public</span><br></pre></td></tr></table></figure></p><p>启动/关闭 firewalld 防火墙服务的应急状况模式，阻断一切网络连接（当远程控制服务器时请慎用）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-on</span><br><span class="line">firewall-cmd --panic-off</span><br></pre></td></tr></table></figure></p><p>查询 public 区域是否允许请求 SSH 和 HTTPS 协议的流量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-service=ssh</span><br><span class="line">firewall-cmd --zone=public --query-service=https</span><br></pre></td></tr></table></figure></p><p>把 firewalld 服务中请求 HTTPS 协议的流量设置为永久允许，并立即生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-service=https</span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>把 firewalld 服务中请求 HTTP 协议的流量设置为永久拒绝，并立即生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>把在 firewalld 服务中访问 8080 和 8081 端口的流量策略设置为允许，但仅限当前生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080-8081/tcp</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></p><p>把原本访问本机 888 端口的流量转发到 22 端口，要且求当前和长期均有效：</p><div class="note info"><p>流量转发命令格式为 firewall-cmd –permanent –zone=&lt;区域&gt; –add-forward-port=port=&lt;源端口号&gt;:proto=&lt;协议&gt;:toport=&lt;目标端口号&gt;:toaddr=&lt;目标 IP 地址&gt;</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后客户端就可以使用ssh命令访问192.168.10.10 主机的 888 端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 888 192.168.10.10  //或者</span><br><span class="line">ssh -p 888 root@192.168.10.10</span><br></pre></td></tr></table></figure></p><h1 id="创建会话网络"><a href="#创建会话网络" class="headerlink" title="创建会话网络"></a>创建会话网络</h1><blockquote><p>nmcli 是一款基于命令行的网络配置工具，功能丰富，参数众多。它可以轻松地查看网络信息或网络状态</p></blockquote><p>查看网络状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection show</span><br><span class="line">nmcli con show eno16777736</span><br></pre></td></tr></table></figure></p><div class="note info"><p><strong>网络回话应用场景：</strong>如果我们在公司网络中使用笔记本电脑时需要手动指定网络的IP地址，而回到家中则是使用DHCP自动分配IP地址。这就需要麻烦地频繁修改IP地址，但是使用了网络会话功能后一切就简单多了—只需在不同的使用环境中激活相应的网络会话，可以实现网络配置信息的自动切换了。</p></div><p>使用<code>con-name</code>参数指定公司所使用的网络会话名称<code>company</code>，然后依次用<code>ifname</code>参数指定本机的网卡名称，用`autoconnect no 参数设置该网络会话默认不被自动激活，以及用 ip4 及 gw4 参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection add con-name company ifname ens33 autoconnect no type ethernet ipv4.addresses 192.168.45.10/24 ipv4.gateway 192.168.45.1</span><br></pre></td></tr></table></figure></p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/nmcli1.jpg" alt=""></p><hr><p>使用 con-name 参数指定家庭所使用的网络会话名称 house。因为我们想从外部DHCP服务器自动获得IP地址，因此这里不需要进行手动指定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection add con-name house ifname ens33</span><br></pre></td></tr></table></figure></p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/nmcli2.jpg" alt=""></p><hr><p>可以使用 nmcli 命令查看创建的所有网络会话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure></p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/nmcli3.jpg" alt=""></p><hr><p>使用nmcli命令配置过的网络会话是永久生效的，下班回家后启用house网络会话，网卡就能自动通过DHCP获取到IP地址了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection up house</span><br></pre></td></tr></table></figure></p><p>删除网络会话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection delete house</span><br></pre></td></tr></table></figure></p><div class="note info"><p>如果使用的是虚拟机，请把虚拟机系统的网卡（网络适配器）切换成桥接模式</p></div><h1 id="待整理"><a href="#待整理" class="headerlink" title="待整理"></a>待整理</h1><p>1、<strong>Linux下关闭终端继续运行进程</strong></p><p>后台运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test.sh &amp;</span><br></pre></td></tr></table></figure></p><pre><code>就是在相应命令的后面添加 ` &amp;`，其他可执行文件一样</code></pre><p>关闭终端之后继续运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./test.sh &amp;</span><br></pre></td></tr></table></figure></p><p>显示当前正在执行的进程：<br>    top命令</p><p>2、<strong>端口及进程管理</strong></p><p>查看端口占用情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :端口号</span><br></pre></td></tr></table></figure></p><p>强制中止端口进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(lsof -i tcp:端口号 -t)</span><br><span class="line"></span><br><span class="line">非root用户：</span><br><span class="line">kill -9 $(sudo lsof -i tcp:端口号 -t)</span><br></pre></td></tr></table></figure></p><p><br></p><blockquote><p><strong>这篇文章中的很多内容来自刘遄老师的<a href="https://www.linuxprobe.com" target="_blank">《Linux就该这么学》</a>，一来防止忘记，二来方便以后查看。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/nature.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;发现很多使用过的Linux命令总是忘记，所以打算把常用的命名整理到这里 &lt;code&gt;待更新&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="linux" scheme="https://lihaitao.net.cn/tags/linux/"/>
    
      <category term="笔记" scheme="https://lihaitao.net.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>远程连接MySQL</title>
    <link href="https://lihaitao.net.cn/2018/mysql-0/88d723d5.html"/>
    <id>https://lihaitao.net.cn/2018/mysql-0/88d723d5.html</id>
    <published>2018-12-22T02:52:34.000Z</published>
    <updated>2019-01-30T04:07:54.709Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/people.jpg" alt=""></p><p>记录一下远程连接Linux下的mysql操作流程。<a id="more"></a></p><ol><li><p>首先登陆Linux下的mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p(密码)</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;用户名&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p> ‘%’代表在任何一台电脑都可以登陆</p></li><li><p>使更改立即生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br></pre></td></tr></table></figure></li><li><p>用<code>exit</code>退出mysql</p></li><li><p>修改mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p> 将<code>bind-address  127.0.0.1</code>改为<code>bind-address  0.0.0.0</code></p></li><li><p>重启mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></li><li><p>查看端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &apos;port&apos;;</span><br></pre></td></tr></table></figure></li><li><p>然后使用navicat连接</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/people.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;记录一下远程连接Linux下的mysql操作流程。
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="mysql" scheme="https://lihaitao.net.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>安装kali虚拟机</title>
    <link href="https://lihaitao.net.cn/2018/kali-vm/8d2aafa7.html"/>
    <id>https://lihaitao.net.cn/2018/kali-vm/8d2aafa7.html</id>
    <published>2018-12-09T08:16:26.000Z</published>
    <updated>2019-01-30T04:08:21.853Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/urban1.jpg" alt=""></p><p>这篇文章整理一下安装Kali虚拟机的过程，以及一些简单的配置问题。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>官网下载Vm虚拟机的压缩包</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali1.png" alt=""></p></li><li><p>解压，然后直接在VMware中打开</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali2.png" alt="点击.vmx文件"></p></li></ol><p>   <img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali3.png" alt="点击开启此虚拟机"></p><p>   <img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali4.png" alt="点击我已复制该虚拟机"></p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><ol><li><strong>无法连接网络</strong></li></ol><p>更改<code>/etc/network/interfaces</code>文件中的内容</p><p>如果虚拟机无法连接网络，在<code>interfaces</code>中添加：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure><p>修改并保存，然后<code>/etc/init.d/networking restart</code>重启网络。</p><ol start="2"><li><strong>配置静态IP</strong></li></ol><p>更改<code>/etc/network/interfaces</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static  //配置eth0使用默认的静态地址</span><br><span class="line">address 192.163.2.123   //设置eth0的IP地址</span><br><span class="line">netmask 255.255.255.0   //设置eth0的子网掩码</span><br><span class="line">gateway 192.163.2.11   //设置当前主机的默认网关</span><br></pre></td></tr></table></figure><p>重启网络同上。</p><ol><li><strong>使用主机代理</strong></li></ol><p>将主机VPN代理设置为<code>允许来自局域网的连接</code>一般端口都为<code>1080</code>，也可以自己设置，只要端口不被占用就可以。</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali5.png" alt=""></p><p>然后设置虚拟机网络代理为<code>手动</code>，设置设置如下：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali6.png" alt=""></p><p>之后就可以使用google了：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali7.png" alt="成功"></p><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><ol><li><strong>安装中文输入法</strong></li></ol><ul><li>更新源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><ul><li>安装fcitx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install fcitx</span><br></pre></td></tr></table></figure><ul><li>安装google拼音输入法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install fcitx-googlepinyin</span><br></pre></td></tr></table></figure><ul><li>重启系统</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><em>之后就可以使用<code>ctrl+空格</code>切换中英文输入</em></p><ol><li><strong>安装chrome</strong></li></ol><p>浏览器中下载chrome的.deb安装包，如下：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali8.png" alt=""></p><p>然后使用<code>gdebi</code>进行安装</p><ul><li>首先安装<code>gdebi</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gdebi -y</span><br></pre></td></tr></table></figure><ul><li>然后使用gdebi安装chrome</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdebi google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali9.png" alt=""></p><p>安装后发现chrome无法打开</p><p>打开终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line">vim google-chrome</span><br></pre></td></tr></table></figure><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali10.png" alt=""></p><p>在最后输入<code>--no-sandbox</code>，保存。</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali11.png" alt=""></p><p>然后就可以启动chrome了。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li><p>终端快捷键</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/kali12.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/urban1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇文章整理一下安装Kali虚拟机的过程，以及一些简单的配置问题。&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="linux" scheme="https://lihaitao.net.cn/tags/linux/"/>
    
      <category term="虚拟机" scheme="https://lihaitao.net.cn/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>将Hexo部署到vps，实现自动发布</title>
    <link href="https://lihaitao.net.cn/2018/vps/22a52aa9.html"/>
    <id>https://lihaitao.net.cn/2018/vps/22a52aa9.html</id>
    <published>2018-11-24T14:33:35.000Z</published>
    <updated>2019-01-30T04:07:43.276Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    <img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/people2.jpg" alt=""></p><p>博客一直放在GitHub上面，今天放到了服务器上，记录了一下简单的流程。供大家参考！</p><a id="more"></a><p><code>hexo相关文章：</code></p><p><a href="https://blog.lihtao.com/2018/hexo/63c39d22/" target="_blank" rel="noopener">用Hexo搭建博客</a></p><p><a href="https://blog.lihtao.com/2018/maupassant/b3f8163/" target="_blank" rel="noopener">Maupassant主题个性化</a></p><h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><ol><li>服务器环境配置，安装Git、Nginx配置、创建git用户</li><li>本地hexo初始化</li><li>使用Git自动部署并发布博客</li></ol><h2 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h2><ul><li><p><strong>安装Git和NodeJS(Centos环境)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line"># 安装NodeJS </span><br><span class="line">curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -</span><br></pre></td></tr></table></figure></li><li><p><strong>创建git账号</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><ul><li><p>添加内容<br>找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure></li><li><p>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure></li><li><p>保存退出并改回权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure></li><li><p>设置git账号密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure></li><li><p>使用<code>su git</code>切换到git用户，再执行下列操作：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 切换到git用户目录</span><br><span class="line">cd /home/git</span><br><span class="line"># 创建.ssh文件夹</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line"># 创建authorized_keys文件并编辑</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"># 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥</span><br><span class="line"># 再将公钥复制粘贴到authorized_keys</span><br><span class="line"># 保存关闭authorized_keys后，修改相应权限</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>然后可以通过本地Git Bash执行ssh命令测试是否可以免密登录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@服务器ip地址</span><br></pre></td></tr></table></figure><p>  这样git用户就添加好了。</p></li></ul><ul><li><strong>安装Nginx</strong></li><li><p>准备工作<br>首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++  </span><br><span class="line">yum install pcre pcre-devel  </span><br><span class="line">yum install zlib zlib-devel  </span><br><span class="line">yum install openssl openssl--devel</span><br></pre></td></tr></table></figure></li><li><p>安装Nginx<br>安装之前，最好检查一下是否已经安装有nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name nginx</span><br></pre></td></tr></table></figure><p>如果系统已经安装了nginx，那么就先卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure></li></ul><p>然后开始安装<br>首先进入<code>/usr/local</code>目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure></p><p>从官网下载最新版的nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>（注：版本号可更改，去官网查看最新版本号修改即可）</p><p>解压nginx压缩包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>会产生一个nginx-1.12.1 目录，这时进入nginx-1.12.1 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  nginx-1.12.1</span><br></pre></td></tr></table></figure></p><p>接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p>（默认安装在/usr/local/nginx，推荐使用默认设置）</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps3.png" alt=""></p><p>如果没有报错，顺利完成后，最好看一下nginx的安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>（where和is要连这些，中间没有空格）</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps4.png" alt=""></p><ul><li>启动和停止nginx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line">./nginx -s quit: 此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">./nginx -s stop: 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br></pre></td></tr></table></figure><p>查询nginx进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure></p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps5.png" alt=""></p><ul><li>重启 nginx</li></ul><ol><li><p>先停止再启动（推荐）：<br>对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置文件：<br>当 nginx 的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动 nginx 即可将配置信息在 nginx 中生效，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><p>启动成功后，在浏览器可以看到如下页面：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps6.png" alt=""></p><ul><li>开机自启动</li></ul><p>即在rc.local增加启动代码就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>  增加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>  到这里，nginx安装完毕，启动、停止、重启操作也都完成。</p><h2 id="建立git裸库"><a href="#建立git裸库" class="headerlink" title="建立git裸库"></a>建立git裸库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 回到git目录</span><br><span class="line">cd /home/git</span><br><span class="line"># 使用git用户创建git裸仓库，以blog.git为例</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure><h2 id="检查用户组权限"><a href="#检查用户组权限" class="headerlink" title="检查用户组权限"></a>检查用户组权限</h2><p>我们的git裸仓库已经建立好了，离成功又近了一步。为了以防万一，我们要检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为git:git<br>​    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​    # 还记得/var/www/吗？这是之前配置nginx时，我们自己选定的网站根目录，请依据你自己的设置更改</span><br><span class="line">​    ll -a /var/www/</span><br><span class="line">​    ll -a /home/git/</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>如果有哪个不是，执行下面相应的命令后再查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown git:git -R /var/www/blog</span><br><span class="line">sudo chown git:git -R /home/git/blog.git</span><br></pre></td></tr></table></figure></p><h2 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h2><p>简单来说，我们使用一个钩子文件：post-receive，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。<br>​    在git用户下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个post-receive文件并编辑</span><br><span class="line">vim ~/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在里面输入以下内容，注意修改为自己的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/home/git/blog.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/blog</span><br><span class="line">PUBLIC_WWW=/var/www/blog</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure><p>保存退出后，执行：<code>chmod +x post-receive</code>赋予这个文件可执行权限。</p><p>好了，以上就是服务器端需要配置的内容。我们还差最后一步就可以完成整个部署了！</p><h2 id="修改配置文件nginx-config"><a href="#修改配置文件nginx-config" class="headerlink" title="修改配置文件nginx_config"></a>修改配置文件nginx_config</h2><p>修改上面的配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx_config</span><br></pre></td></tr></table></figure></p><p>然后修改其中两个部分，如下所示：<br><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/vps7.jpg" alt=""></p><p>然后<code>重启nginx</code>，方法见<code>nginx安装</code>部分。</p><h2 id="配置本地Hexo的-config-yml"><a href="#配置本地Hexo的-config-yml" class="headerlink" title="配置本地Hexo的_config.yml"></a>配置本地Hexo的_config.yml</h2><p>非常简单，只需要找到本地Hexo博客的站点配置文件_config.yml，找到以下内容并修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: git@你的服务器IP:/home/git/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存后，剩下的就是Hexo的日常操作了，这里就不赘述了，写完文章后，在你的本地博客根目录执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><p>就可以实现线上博客的自动更新了！一切搞定！</p><h2 id="一些需要注意的地方"><a href="#一些需要注意的地方" class="headerlink" title="一些需要注意的地方"></a>一些需要注意的地方</h2><ul><li><p>vim: command not found<br><strong>解决方法：</strong>安装vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim*</span><br></pre></td></tr></table></figure></li><li><p>设置防火墙<br>  开启80端口，并重新启动防火墙</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/people2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;博客一直放在GitHub上面，今天放到了服务器上，记录了一下简单的流程。供大家参考！&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="hexo" scheme="https://lihaitao.net.cn/tags/hexo/"/>
    
      <category term="nginx" scheme="https://lihaitao.net.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Maupassant主题个性化</title>
    <link href="https://lihaitao.net.cn/2018/maupassant/b3f8163.html"/>
    <id>https://lihaitao.net.cn/2018/maupassant/b3f8163.html</id>
    <published>2018-11-24T08:20:26.000Z</published>
    <updated>2019-01-30T04:08:05.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/aninals.jpg" alt=""></p><p>其实官方文档说的已经很清楚了，当然还是有一些小坑，我就填一下吧。<a id="more"></a></p><p><code>hexo相关文章：</code></p><p><a href="https://blog.lihtao.com/2018/hexo/63c39d22/" target="_blank" rel="noopener">用Hexo搭建博客</a></p><p><a href="https://blog.lihtao.com/2018/vps/22a52aa9/" target="_blank" rel="noopener">将Hexo部署到vps，实现自动发布</a></p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>Disqus评论系统</li><li>不蒜子页面访问计数</li><li>添加捐赠按钮</li><li>网站图标</li><li>添加页面</li><li>中文设置</li></ul><p>等等</p><h2 id="详细操作步骤"><a href="#详细操作步骤" class="headerlink" title="详细操作步骤"></a>详细操作步骤</h2><ol><li><strong>Disqus评论系统</strong></li></ol><p><a href="https://www.jianshu.com/p/d68de067ea74" target="_blank" rel="noopener">Hexo添加评论系统</a>，这篇文章写的很详细，步骤都很简单</p><ol start="2"><li><strong>不蒜子页面访问计数</strong></li></ol><ul><li>修改<code>_config.yml</code>文件中的<code>busuanzi</code>为true</li><li>因为作者没有使用的原因，并未发现不蒜子的域名已经改变，所以如果想要添加计数功能，需修改主题中的部分代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if theme.busuanzi == true</span><br><span class="line">        script(src=&apos;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&apos;, async)</span><br><span class="line">        span#busuanzi_container_page_pv= &apos; | &apos;</span><br><span class="line">          span#busuanzi_value_page_pv</span><br><span class="line">          span= &apos; &apos; + __(&apos;Hits&apos;)</span><br></pre></td></tr></table></figure><p>将上面代码中的<code>dn-lbstatics.qbox.me</code>修改为<code>busuanzi.ibruce.info</code>即可。</p><p><strong>注：</strong></p><ol start="3"><li><p><strong>添加捐赠按钮</strong><br> 首先修改主题中间中donate相关的配置，再将相应的图片放到<code>\themes\maupassant\source\img\</code>文件夹下</p></li><li><p><strong>网站图片</strong><br> 若要设置网站Favicon，可以将favicon.ico放在Hexo根目录的source文件夹下，建议的大小：32px*32px。<br> <strong>注：</strong>因为浏览器缓存的原因，可以换个浏览器，或者等待一段时间重新加载</p></li><li><p><strong>添加页面</strong><br> 在根目录的source文件夹下添加相应的文件夹，例如：about、guestbook、history等。并在相应的文件中添加<code>index.md</code>文件。</p><p>根目录下的source目录结构如下：</p></li></ol><pre><code>![目录结构](https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/hexo2.png)</code></pre><ol start="6"><li><p><strong>设置中文</strong></p><p>将根目录下的<code>_config.yml</code>中的<code>language</code>设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><p>即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/aninals.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实官方文档说的已经很清楚了，当然还是有一些小坑，我就填一下吧。
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="hexo" scheme="https://lihaitao.net.cn/tags/hexo/"/>
    
      <category term="theme" scheme="https://lihaitao.net.cn/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建博客</title>
    <link href="https://lihaitao.net.cn/2018/hexo/63c39d22.html"/>
    <id>https://lihaitao.net.cn/2018/hexo/63c39d22.html</id>
    <published>2018-11-24T08:20:26.000Z</published>
    <updated>2019-01-30T04:08:27.338Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/hexogithub.png" alt=""></p><p>最近用hexo搭建了自己的博客，之前是挂在GitHub上，今天又将博客放在了自己的服务器上，中间遇到了不少坑，分享一下搭建博客的过程。<a id="more"></a></p><h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><ul><li>Git</li><li>Nodejs</li><li>Hexo </li><li>Github Pages</li><li>SSH配置</li><li>域名解析</li></ul><p>大概就这些吧。</p><h2 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a>本地建站</h2><ol><li><p><strong>安装Hexo</strong></p><p>根据<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>，安装Hexo的前提是先安装Node.js和Git(安装过程很简单，网上有很多教程，此处不详细展开)</p><p>安装Hexo只需要在终端(cmd、Git bash、Node.js、command prompt均可)中敲入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p><strong>建立站点</strong></p></li></ol><ul><li>在电脑中建立准备搭建博客的文件夹，比如文件夹D:\Blog；</li><li>在终端切换到Blog文件夹</li><li>如果默认的npm镜像太慢，可以切换到淘宝镜像或者使用代理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure><ul><li>依此执行下面两条命令，初始化hexo，安装npm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行完这两条命令后，Blog下的目录结构如下：</p><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/hexo1.png" alt="目录结构"></p><ul><li><strong>目录结构说明：</strong></li></ul><ul><li><code>_config.yml</code> 文件存放着网站的配置信息，可以在这里配置大部分的参数。</li><li><code>package.json</code> 文件存放着插件信息，从中可以查看那些插件已经安装。</li><li><code>scaffolds</code> 是模板文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件，不过这个模板和后面的主题里指的模板不一样。</li><li><code>source</code> 是存放用户资源的地方的文件夹，除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹（别急，等下会生成的），而其他文件会被拷贝过去。</li><li><code>themes</code> 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题已经在里面了。</li></ul><ul><li>在终端输入<code>hexo server</code>，可以在 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 中查看网站的样子。</li></ul><ol start="3"><li><strong>修改配置文件</strong></li></ol><ul><li>在<code>_config.yml</code>文件中，我们暂时可以修改其中的<code>title</code>，<code>subtitle</code>和<code>author</code>,替换成自己网站的名字和作者名字即可。</li></ul><ol start="4"><li><strong>添加文章</strong></li></ol><ul><li>在 <code>_posts</code> 文件夹下，新建一个 Markdown 文件，或者把你以前有的 Markdown 文件复制进来，根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">基本操作 — Front-matter</a> ，写好你的第一篇文章。</li><li>其中首部的两条<code>---</code>分割线内的内容即为Front-matter</li><li>在终端输入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>Hexo 会替我们刚加入到 <code>_posts</code> 文件夹下的 markdown 文件生成静态文件。运行 <code>hexo server</code> 可以在 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 中看到我们新添加的网页内容了。至此，我们采用默认主题 landscape 的网站已经生成了，且相信你已经掌握了关于 Hexo 的大部分操作，如果自感还不熟悉，可以再看看 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">开始使用 — 命令</a>，</p><ul><li><strong>主要是下面几个命令：</strong></li></ul><ul><li><code>hexo init [folder]</code>: 新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站；</li><li><code>hexo generate</code>: 生成静态文件；</li><li><code>hexo server</code>: 启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>；</li><li><code>hexo deploy</code>: 部署网站（后文会用得）；</li><li><code>hexo clean</code>: 清除缓存文件 (<code>db.json</code>) 和 <code>public</code> 文件夹下已生成的静态文件。</li></ul><ol start="5"><li><strong>更换主题</strong></li></ol><p>我们可以去 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes | Hexo</a> 中挑选喜欢的主题。</p><ul><li>比如主题<a href="https://www.haomwei.com/" target="_blank" rel="noopener">maupassant</a>，我们可以打开其GitHub<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">主页</a>，然后安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p>依此执行上面三条命令，完成安装</p><ul><li>然后将<code>Blog/_config.yml</code>中的<code>theme</code>的值又默认的<code>landscape</code>改为<code>maupassant</code>。</li><li>再次在终端输入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>现在我们就可以在本地4000端口查看网站的样式</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ol><li><strong>创建GitHub仓库</strong></li></ol><p>要在 Github 上创建项目，当然首先需要<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">注册 Github帐号</a>。在注册完成后，Github 的官方文档 <a href="https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github" target="_blank" rel="noopener">Create a new repository on GitHub</a> 已经图文并茂将如何建立一个 repository 交待得非常清楚明白了，唯一要注意的是，第二步里的 Repository name 一定要是 <code>your_name.github.io</code> ，<code>your_name</code> 是你的 Github 用户名。</p><ol start="2"><li><strong>配置Git</strong></li></ol><p>根据 Github 的官方文档 <a href="https://help.github.com/articles/set-up-git/#setting-up-git" target="_blank" rel="noopener">Setting up Git</a>，这一操作的目的是 Tell Git your <em>name</em> so your commits will be properly labeled 和 Tell Git the <em>email address</em> that will be associated with your Git commits，也就是告诉版本控制软件 Git 接下来这台电脑上提交的文件是 E-mail 地址是什么的谁谁谁提交的。在 Git Bash 中执行如下代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure><p>其中，<code>YOUR NAME</code> 是自己取的名字，<code>YOUR EMAIL ADDRESS</code> 是自己的邮箱。由于自己的博客网站就自己一个人提交，所以就都设置成跟 Github 用户名和邮箱相同了。但其实是可以不同的，因为对于很多项目，并不只有一个开发者，Github 允许多人向同一个 Repo 提交，这里提供用户名和邮箱，只是为了搞清楚哪些代码是谁谁谁提交的。</p><ul><li><strong>生成SSH key</strong></li></ul><p>根据 Github 的官方文档 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key" target="_blank" rel="noopener">Generating a new SSH key</a> ， 我们在 Git Bash 下执行如下命令，生成 SSH key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>其中，<a href="mailto:`your_email@example.com" target="_blank" rel="noopener">`your_email@example.com</a>` 是你的 Github 注册邮箱。然后，Git Bash 中会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><p>表示新的 SSH 已经生成了。随后会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter a file in which to save the key</span><br><span class="line">(/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>这里 <code>id_rsa</code> 是生成的 key 文件的文件名，默认都是这个；如果不是，在后面用到 <code>id_rsa</code> 的地方请替换成出现的名字。这条信息是让你选择 SSH key 存放的地点，按回车选择默认的即可。回车后，还会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>让你设置使用 SSH 密钥时的密码，由于我们都是在自己个人的电脑上操作，所以仍然回车，不设置密码即可。</p><ul><li><strong>将SSH key添加到ssh-agent</strong></li></ul><p>根据 <a href="https://en.wikipedia.org/wiki/Ssh-agent" target="_blank" rel="noopener">Wikipedia</a>，<a href="https://en.wikipedia.org/wiki/Ssh-agent" target="_blank" rel="noopener">ssh-agent</a> 是一个在本地登录会话持续时间内，将未加密的密钥存储在内存中，并使用 Unix 域套接字与 SSH 客户端进行通信的程序。根据 Github 的官方文档 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">Adding your SSH key to the ssh-agent</a> ， 我们在 Git Bash 下执行如下命令，开启 ssh-agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><p>然后我们要将这个 SSH key 添加到 ssh-agent 里去，运行如下命令，其中 <code>id_rsa</code> 是你的 key 文件的文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><ul><li><strong>将SSH key 添加到 GitHub 账户</strong></li></ul><p>Github 的官方文档 <a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="noopener">Adding a new SSH key to your GitHub account</a> 已经图文并茂将如何在 Github</p><p>帐号中添加 SSH 介绍的非常清楚了。先是在 Git Bash 中将 SSH Key 拷贝出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"># Copies the contents of the id_rsa.pub file to your clipboard</span><br></pre></td></tr></table></figure><p><code>id_rsa</code> 是你刚才的 SSH Key 文件。此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，依次点击自己的头像，<strong>Settings</strong>，<strong>SSH and GPG keys</strong>，<strong>New SSH key</strong> 或者 <strong>Add SSH key</strong>， 在 <strong>Title</strong> 这里输入 Key 的label，比如 <code>your_name - PC</code>，然后在 Key 里面把 <strong>SSH Key</strong> 粘贴进去，点击 <strong>Add SSH key</strong> 大功告成。</p><p>回想一下，操作了那么多 SSH 相关的命令，我们在干嘛？个人的理解，就是在生成身份认证的凭证 SSH key，分别放在自己本地电脑和 Github 服务器上，以后向 Github 提交内容的时候，两者的 Key 匹配就可以了，省去了我们每次输密码的时间。</p><ul><li><strong>测试SSH连接</strong></li></ul><p>在大功告成之前，为了稳妥起见，我们来测试一下自己跟 Github 服务器 SSH 连接是否已经建立起来了。Github 的官方文档 <a href="https://help.github.com/articles/testing-your-ssh-connection/" target="_blank" rel="noopener">Testing your SSH connection</a> 已经将次环节介绍得非常详细了。我们要做得就是在 Git Bash 中敲入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你可能会看到类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.30.252.1)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>没关系的，输入 <code>yes</code> 敲回车，就可以看到如下的成功信息了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>至此为止，我们已经建立起了跟 Github 服务器的连接。其实我们也可以用 <code>git push</code> 命令，提交 <code>public</code> 文件夹下面的内容，不过 Hexo 更我们提供了更方便的途径。</p><ol start="3"><li><strong>Hexo 部署</strong></li></ol><p>Hexo 提供了 <code>hexo deploy</code> 命令，可以方便地将整个 <code>public</code> 文件夹部署到 Github 服务器上去。根据 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">基本操作 — 部署</a> 我们只需要做以下两步：</p><ul><li>安装<code>hexo-deployer-git</code>插件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>修改<code>_config.yml</code>中的参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/your_name/your_name.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>其中，your_name 是你的 Github 帐号名。<code>repo</code> 对应的是你 <code>your_name.github.io</code> 这个项目的库（Repository）地址，进入这个项目的主页，点击 <strong>Clone or download</strong> 下拉菜单也能看到。<code>branch</code> 是分支名称，如果使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测，通常都是 <code>master</code>。 <strong>注意，冒号后的空格非常重要，一定要有！</strong></p><h2 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h2><p>看到这里，恭喜你已经拥有了域名为 <code>your_name.github.io</code> 的个人博客网站了，进一步的，就是希望能够在浏览器中输入自己的域名，比如 <code>your.site</code>，就可以看到自己的网站。停下来思考一下，要实现这一目的，我们需要干什么？首先，当然我们要去买一个域名。买完域名后呢？怎么要让浏览器知道这个域名对应的网站内容在 Github 服务器上？这就是域名解析的事情啦。这是浏览器这里，还有 Github 服务器呢？Github 服务器上存放着那么多个人网站，怎么在收到浏览器一个要访问我的域名为 <code>your.site</code>这个站点内容的时候，准确的把我的站点的内容送出来呢？这就是要在自己提交的 <code>public</code> 文件夹下添加 <code>CNAME</code> 文件了。一共 3 个环节，我们一个一个来介绍。</p><ol><li><strong>购买域名</strong></li></ol><p>我的域名是在阿里云的万网上买的</p><ol start="2"><li><strong>域名解析</strong></li></ol><p>阿里云提供域名的免费解析，当然你也可以其他的域名解析服务</p><ul><li><strong>告诉 <code>GitHub</code> <code>your_name.github.io</code> 对应那个域名</strong></li></ul><p>在 <code>source</code> 文件夹下添加一个 <code>CNAME</code> 文件，里面就一行内容，写上自己的域名，比如 <code>your.site</code>。 在终端中运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>Hexo 在生成 <code>public</code> 文件夹内容的时候，会自动把 <code>CNAME</code> 文件复制过去，这样，<code>public</code> 文件夹下就也有 <code>CNAME</code> 文件了。再运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>将其部署到 Github，让 Github 知道 <code>your_name.github.io</code> 对应哪个域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/hexogithub.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近用hexo搭建了自己的博客，之前是挂在GitHub上，今天又将博客放在了自己的服务器上，中间遇到了不少坑，分享一下搭建博客的过程。
    
    </summary>
    
      <category term="technology" scheme="https://lihaitao.net.cn/categories/technology/"/>
    
    
      <category term="hexo" scheme="https://lihaitao.net.cn/tags/hexo/"/>
    
      <category term="博客搭建" scheme="https://lihaitao.net.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lihaitao.net.cn/2018/hello-world/4a17b156.html"/>
    <id>https://lihaitao.net.cn/2018/hello-world/4a17b156.html</id>
    <published>2018-07-24T08:20:26.000Z</published>
    <updated>2019-01-30T04:08:47.839Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/clouds.jpg" alt=""><br><a id="more"></a></p><p>Hello Word！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lihtao-1257343120.cos.ap-shanghai.myqcloud.com/blog/clouds.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="emotion" scheme="https://lihaitao.net.cn/categories/emotion/"/>
    
    
      <category term="hexo" scheme="https://lihaitao.net.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
